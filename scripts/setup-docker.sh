#!/bin/bash
# Script de Configura√ß√£o Docker - Sistema CRAS com Backup
# Automatiza todo o processo de configura√ß√£o e inicializa√ß√£o

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_color() {
    color=$1
    message=$2
    echo -e "${color}${message}${NC}"
}

print_header() {
    echo ""
    print_color $BLUE "========================================="
    print_color $BLUE "$1"
    print_color $BLUE "========================================="
}

# Verificar se Docker est√° instalado e rodando
check_docker() {
    if ! command -v docker >/dev/null 2>&1; then
        print_color $RED "‚ùå Docker n√£o est√° instalado"
        print_color $YELLOW "   Instale o Docker: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    if ! docker info >/dev/null 2>&1; then
        print_color $RED "‚ùå Docker n√£o est√° rodando"
        print_color $YELLOW "   Inicie o Docker e tente novamente"
        exit 1
    fi
    
    if ! command -v docker-compose >/dev/null 2>&1; then
        print_color $RED "‚ùå Docker Compose n√£o est√° instalado"
        print_color $YELLOW "   Instale o Docker Compose: https://docs.docker.com/compose/install/"
        exit 1
    fi
    
    print_color $GREEN "‚úÖ Docker e Docker Compose est√£o dispon√≠veis"
}

# Criar arquivos de configura√ß√£o se necess√°rio
setup_config() {
    print_header "Configurando Arquivos"
    
    # Criar .env se n√£o existir
    if [ ! -f ".env" ]; then
        print_color $BLUE "üìù Criando arquivo .env..."
        cat > .env << EOF
# Configura√ß√£o Django
DEBUG=False
SECRET_KEY=sua-chave-secreta-aqui-$(openssl rand -hex 32)
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# Configura√ß√£o de Backup
BACKUP_ENABLED=true
BACKUP_RETENTION_DAYS=30
BACKUP_SCHEDULE=0 2 * * *

# Configura√ß√£o do Container
CONTAINER_NAME=cras-web
EOF
        print_color $GREEN "‚úÖ Arquivo .env criado"
    else
        print_color $GREEN "‚úÖ Arquivo .env j√° existe"
    fi
    
    # Criar diret√≥rios necess√°rios
    print_color $BLUE "üìÅ Criando diret√≥rios..."
    mkdir -p backups logs media laudos
    print_color $GREEN "‚úÖ Diret√≥rios criados"
    
    # Verificar permiss√µes dos scripts
    print_color $BLUE "üîß Configurando permiss√µes..."
    chmod +x scripts/*.sh
    print_color $GREEN "‚úÖ Permiss√µes configuradas"
}

# Construir imagem Docker
build_image() {
    print_header "Construindo Imagem Docker"
    
    print_color $BLUE "üî® Construindo imagem (isso pode demorar alguns minutos)..."
    docker-compose build --no-cache
    print_color $GREEN "‚úÖ Imagem constru√≠da com sucesso"
}

# Inicializar sistema
start_system() {
    print_header "Iniciando Sistema"
    
    print_color $BLUE "üöÄ Iniciando containers..."
    docker-compose up -d
    
    print_color $BLUE "‚è≥ Aguardando sistema inicializar..."
    sleep 15
    
    # Verificar se est√° rodando
    if docker-compose ps | grep -q "Up"; then
        print_color $GREEN "‚úÖ Sistema iniciado com sucesso!"
        
        print_color $BLUE "üîç Verificando sa√∫de do container..."
        docker-compose ps
        
        print_color $BLUE "üìã Verificando cron no container..."
        docker-compose exec web crontab -l || print_color $YELLOW "‚ö†Ô∏è  Verifica√ß√£o do cron falhou"
        
    else
        print_color $RED "‚ùå Erro ao iniciar sistema"
        print_color $YELLOW "   Verificando logs..."
        docker-compose logs --tail=20
        exit 1
    fi
}

# Testar backup
test_backup() {
    print_header "Testando Sistema de Backup"
    
    print_color $BLUE "üß™ Executando backup de teste..."
    ./scripts/docker-backup.sh backup
    
    print_color $BLUE "üìä Verificando resultado..."
    if ls backups/backup_*.tar.gz >/dev/null 2>&1; then
        LATEST_BACKUP=$(ls -t backups/backup_*.tar.gz | head -1)
        BACKUP_SIZE=$(du -h "$LATEST_BACKUP" | cut -f1)
        print_color $GREEN "‚úÖ Backup criado: $(basename "$LATEST_BACKUP") ($BACKUP_SIZE)"
    else
        print_color $RED "‚ùå Erro no teste de backup"
        exit 1
    fi
}

# Mostrar informa√ß√µes finais
show_final_info() {
    print_header "Sistema Configurado com Sucesso"
    
    print_color $GREEN "üéâ O Sistema CRAS est√° rodando com backup autom√°tico!"
    echo ""
    
    print_color $BLUE "üìã Informa√ß√µes do Sistema:"
    echo "   üåê Aplica√ß√£o: http://localhost:8000"
    echo "   üìÅ Backups: ./backups/"
    echo "   üìã Logs: ./logs/"
    echo "   ‚è∞ Backup autom√°tico: Di√°rio √†s 2:00 AM"
    echo ""
    
    print_color $BLUE "üõ†Ô∏è  Comandos √öteis:"
    echo "   ./scripts/docker-backup.sh menu    - Menu de gerenciamento"
    echo "   ./scripts/docker-backup.sh backup  - Backup manual"
    echo "   ./scripts/docker-backup.sh status  - Status do sistema"
    echo "   docker-compose logs -f             - Ver logs"
    echo "   docker-compose down                - Parar sistema"
    echo "   docker-compose up -d               - Iniciar sistema"
    echo ""
    
    print_color $YELLOW "‚ö†Ô∏è  Lembre-se:"
    echo "   - Configure sua SECRET_KEY no arquivo .env"
    echo "   - Acesse http://localhost:8000 para usar o sistema"
    echo "   - Backups autom√°ticos rodam √†s 2:00 AM"
    echo ""
}

# Menu de configura√ß√£o
setup_menu() {
    while true; do
        clear
        print_color $BLUE "=== Configurador Docker - Sistema CRAS ==="
        echo "1. Configura√ß√£o Completa (Recomendado)"
        echo "2. Apenas construir imagem"
        echo "3. Apenas iniciar sistema"
        echo "4. Testar backup"
        echo "5. Verificar status"
        echo "6. Ver logs"
        echo "7. Parar sistema"
        echo "8. Menu de backup"
        echo "9. Sair"
        echo ""
        
        read -p "Escolha uma op√ß√£o (1-9): " choice
        
        case $choice in
            1)
                check_docker
                setup_config
                build_image
                start_system
                test_backup
                show_final_info
                break
                ;;
            2)
                check_docker
                build_image
                ;;
            3)
                check_docker
                start_system
                ;;
            4)
                test_backup
                ;;
            5)
                ./scripts/docker-backup.sh status
                ;;
            6)
                docker-compose logs -f
                ;;
            7)
                docker-compose down
                print_color $GREEN "‚úÖ Sistema parado"
                ;;
            8)
                ./scripts/docker-backup.sh menu
                ;;
            9)
                print_color $GREEN "üëã At√© logo!"
                exit 0
                ;;
            *)
                print_color $RED "‚ùå Op√ß√£o inv√°lida"
                sleep 2
                ;;
        esac
        
        if [ $choice -ne 1 ] && [ $choice -ne 9 ]; then
            echo ""
            read -p "Pressione Enter para continuar..."
        fi
    done
}

# Main
case "$1" in
    full|setup)
        check_docker
        setup_config
        build_image
        start_system
        test_backup
        show_final_info
        ;;
    build)
        check_docker
        build_image
        ;;
    start)
        check_docker
        start_system
        ;;
    test)
        test_backup
        ;;
    info)
        show_final_info
        ;;
    menu|"")
        setup_menu
        ;;
    *)
        echo "Uso: $0 {full|build|start|test|info|menu}"
        echo ""
        echo "Comandos:"
        echo "  full   - Configura√ß√£o completa (recomendado)"
        echo "  build  - Apenas construir imagem Docker"
        echo "  start  - Apenas iniciar sistema"
        echo "  test   - Testar sistema de backup"
        echo "  info   - Mostrar informa√ß√µes do sistema"
        echo "  menu   - Menu interativo"
        exit 1
        ;;
esac
